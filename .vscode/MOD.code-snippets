{
	"Print to console":{
		"scope":"c++,cpp",
		"prefix" : "MOD",
		"body" :[
            
            "template <const i64 MOD>",
            "struct ModInt{",
            "    i64 x;",
            "    ModInt(i64 n = 0){",
            "        x = n % MOD;",
            "        if (x < 0) x += MOD;",
            "    }",
            "    ModInt<MOD> pw(i64 k){",
            "        ModInt<MOD> res = 1;",
            "        ModInt a = *this;",
            "        while (k) {",
            "            if (k & 1) res *= a;",
            "            a *= a;",
            "            k /= 2;",
            "        }",
            "        return res;",
            "    }",
            "    ModInt<MOD> inv(){ return pw(MOD - 2); }",
            "    friend ModInt<MOD> operator+(ModInt<MOD> a,ModInt<MOD> b){return (a.x + b.x) % MOD;}",
            "    friend ModInt<MOD> operator-(ModInt<MOD> a,ModInt<MOD> b){return (a.x + MOD - b.x) % MOD;}",
            "    friend ModInt<MOD> operator*(ModInt<MOD> a,ModInt<MOD> b){return (a.x * b.x) % MOD;}",
            "    friend ModInt<MOD> operator/(ModInt<MOD> a,ModInt<MOD> b){return a * b.inv();  }",
            "    friend bool operator<=(ModInt<MOD> a, ModInt<MOD> b){ return a.x <= b.x; }",
            "    friend bool operator<(ModInt<MOD> a, ModInt<MOD> b){ return a.x < b.x; }",
            "    friend bool operator>=(ModInt<MOD> a, ModInt<MOD> b){ return a.x >= b.x; }",
            "    friend bool operator>(ModInt<MOD> a, ModInt<MOD> b){ return a.x > b.x; }",
            "    friend bool operator==(ModInt<MOD> a, ModInt<MOD> b){ return a.x == b.x; }",
            "    friend ostream& operator<<(ostream& out,const ModInt<MOD>& a){return out << a.x;}",
            "    friend istream& operator>>(istream& in,ModInt<MOD>& a){i64 n;in >> n;a = ModInt<MOD>(n); return in;}",
            "    ModInt<MOD>& operator+=(const ModInt<MOD>& a){*this = *this + a;return *this;}",
            "    ModInt<MOD>& operator-=(const ModInt<MOD>& a){*this = *this - a;return *this;}",
            "    ModInt<MOD>& operator*=(const ModInt<MOD>& a){*this = *this * a;return *this;}",
            "    ModInt<MOD>& operator/=(const ModInt<MOD>& a){*this = *this / a;return *this;}",
            "};",
            "using mint = ModInt<998244353>;",


        ],
    }
}