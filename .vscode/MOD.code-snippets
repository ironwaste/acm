{
	"Print to console":{
		"scope":"c++,cpp",
		"prefix" : "MOD",
		"body" :[
            
// 模除的板子打一下把
    "template<const i64 MOD>",
    "struct ModInt {",
        "\ti64 x;",
        "\tModInt(i64 n = 0) { x = n; }",
        "\tModInt<MOD> qmi(i64 k) {",
        "\t\tModInt<MOD>res = 1;",
        "\t\tModInt a = *this;",
        "\t\twhile (k) {",
        "\t\t\tif (k & 1) (res.x *= a.x) %= MOD;",
        "\t\t\t(a.x *= a.x) %= MOD;",
        "\t\t\tk /= 2;",
        "\t\t}",
        "\t\t\treturn res;",
        "\t}",
        "",
        "\tModInt<MOD> inv() { ModInt<MOD> a = *this; return a.qmi(MOD - 2); }",
        "\tModInt<MOD> friend operator+(ModInt<MOD> a, ModInt<MOD> b) { return (a.x + b.x) % MOD; }",
        "\tModInt<MOD> friend operator-(ModInt<MOD> a, ModInt<MOD> b) { return (a.x + MOD - b.x) % MOD; }",
        "\tModInt<MOD> friend operator*(ModInt<MOD> a, ModInt<MOD> b) { return (a.x * b.x) % MOD; }",
        "\tModInt<MOD> friend operator/(ModInt<MOD> a, ModInt<MOD> b) { return (a.x * b.inv()) % MOD; }",
        "\tModInt<MOD> friend operator<=(ModInt<MOD> a,ModInt<MOD> b){ return a.x <= b.x;}",
        "\tModInt<MOD> friend operator< (ModInt<MOD> a,ModInt<MOD> b){ return a.x <  b.x;}",
        "\tModInt<MOD> friend operator>=(ModInt<MOD> a,ModInt<MOD> b){ return a.x >= b.x;}",
        "\tModInt<MOD> friend operator> (ModInt<MOD> a,ModInt<MOD> b){ return a.x >  b.x;}",
        "\tModInt<MOD> friend operator==(ModInt<MOD> a,ModInt<MOD> b){ return a.x == b.x;}",
        "\tfriend ostream& operator<< (ostream& out,ModInt<MOD>& a){ return out << a.x;}",
        "\tfriend istream& operator>> (istream& in, ModInt<MOD>& a){ return  in >> a.x;}",
        "\tModInt<MOD> operator+= (const ModInt<MOD>& a){ return *this = x + a;}",
        "\tModInt<MOD> operator-= (const ModInt<MOD>& a){ return *this = x - a;}",
        "\tModInt<MOD> operator*= (const ModInt<MOD>& a){ return *this = x * a;}",
        "\tModInt<MOD> operator/= (const ModInt<MOD>& a){ return *this = x / a;}",
        "",
    "}",




        ],
    }
}